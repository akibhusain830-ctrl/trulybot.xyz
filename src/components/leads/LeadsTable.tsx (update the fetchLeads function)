
import { NextRequest, NextResponse } from 'next/server';
import { createClient } from '@supabase/supabase-js';

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const serviceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;
const admin = createClient(supabaseUrl, serviceKey, { auth: { persistSession: false } });

export async function GET(req: NextRequest) {
  try {
    const { data: { user }, error: authError } = await admin.auth.getUser();
    if (authError || !user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const { searchParams } = new URL(req.url);
    const workspaceId = searchParams.get('workspaceId');
    const status = searchParams.get('status');
    const page = Math.max(1, parseInt(searchParams.get('page') || '1', 10));
    const pageSize = Math.min(100, parseInt(searchParams.get('pageSize') || '20', 10));
    const from = (page - 1) * pageSize;
    const to = from + pageSize - 1;

    let query = admin
      .from('leads')
      .select('id,workspace_id,source_bot_id,email,first_message,status,origin,created_at,intent_keywords,meta,name,company', { count: 'exact' })
      .order('created_at', { ascending: false })
      .range(from, to)
      .eq('user_id', user.id);

    if (workspaceId) {
      if (workspaceId === 'demo') {
        query = query.is('workspace_id', null);
      } else {
        query = query.eq('workspace_id', workspaceId);
      }
    }
    if (status) {
      query = query.eq('status', status);
    }

    const { data, error, count } = await query;
    if (error) {
      console.error('[GET /api/leads] error', error);
      return NextResponse.json({ error: 'Fetch failed' }, { status: 500 });
    }

    return NextResponse.json({
      data,
      page,
      pageSize,
      total: count || 0
    });
  } catch (e: any) {
    return NextResponse.json({ error: e.message }, { status: 500 });
  }
}

export async function POST(req: NextRequest) {
  const { data: { user }, error: authError } = await admin.auth.getUser();
  if (authError || !user) {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  }

  const leadData = await req.json();
  
  const { data, error } = await admin
    .from('leads')
    .insert({
      ...leadData,
      user_id: user.id // Associate lead with current user
    });

  if (error) {
    console.error('[POST /api/leads] error', error);
    return NextResponse.json({ error: 'Failed to create lead' }, { status: 500 });
  }

  return NextResponse.json({ data });
}
